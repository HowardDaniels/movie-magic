

  

      // https://www.rottentomatoes.com/m/batman_forever
      //https://api.themoviedb.org/3/discover/movie?primary_release_date.gte=2020-02-22&primary_release_date.lte=2020-02-22&api_key=052554d7a6faad5978b2ef60814ccc5d

    

      // We have access to the todos as an argument inside of the callback function
       
    
  







//wait for click on the "search current movies" button
//once clicked, the "search movie function is called" and the user is taken to the results page via the "action" of the button
// or by res.render(__dirname, "results.html");
//searchMovie: 
// a query is made to the user table in the database to get the favorite actors of the user and set them into three variables
//favActorOne, favActorTwo, favActorThree,
// a query is made to the user table in the database to get the favorite directors of the user and set them into three variables
//favDirectorOne, favDirectorTwo, favDirectorThree.
// the fav genre is also 
//a query is made to get the user's three favorite movies and they are pushed into an array
// an empty actorNameMovie array, empty directorNameMovie array, empty assortedNameMovie  array are created
//most favorite is favMovie[0], second is favMovie[1].favMOvie[2] etc.
//for each of the titles in the favMovies array,
    //perform a API GET from the OMDB using the movie title as search parameter
    //once the data is received, the actor names in the data is put into a variable called actors.
    //the actor string is then parsed into an array by using the "split(",") function 
    //for each of the names in this current array, it is pushed into the prevousely empty actor names array
    // the actor names is pushed into the previousely empty actorNameMovie array
    // the director/directors name is stored   into an variable
    // the directorName is then parsed into an array by using the "split(",") function
    // for each of this array, the name is pushed into the previousely empty directorNameMovie array
    // the directors name array is then pushed
    // the writer, producer, composers, etc are then pushed into the assortedNameMovie array,
    

//then an api call is made to search all of the movies with an release date ranged from a week from the time of search to one week in the future
//limit the list to 20 movies.
//an array all movies is created
//an array chosen movie is created
//for each of the the twenty movies: 
    //the actor names, director names, all names are pushed into an array named movieNames array
    //a variable movieObject is created as an object
    //a variable called score is created and is set to the value of the rotten tomato score times 0.1
    //for all the names in the movieNamesArray, 
        //if movieNamesArray[i] = favActorOne, score +10, favActorTwo, +=9, favActorThree,+=8,
        //favDirectorOne, +=10(etc..) assorted names match +=1
    //if current movie genre = fav genre, score +=2
    //movie object = {title: movie.title, score:movie.score}
    //the movieObject is pushed to the all movies array
//sort the array based on the value of each of the movie score


// const insertionSort = (allmovies) => {
//     for (let i = 1; i <allmovies.length; i++) {
//       let j = i - 1
//       let tmp = allmovies[i]
//       while (j >= 0 && allmovies[j].score > tmp.score) {
//         allmovies[j + 1] = allmovies[j]
//         j--
//       }
//       allmivies[j+1] = tmp
//     }
//     return nums

//push the first 5-10 movie.title with the highest score into the chosen Movie array
//for each of the movies in the chosen array, a get API action is performed. 
// a posters array is created.
// the the web address of each of the movie's poster is then pushed into the posters array
//for first 5  of the movies in chosen each of the posters is pushed into the rotating display.
//their title will be displayed on the borrom of the poster and their rotten tomatos link will be embeded into the poster 
// when clicked goes to the corresponding rotten tomatos site.
//there will be a forward and backwards button for the display.  
//when forward button it bushed, and if the first one in the display is the the first one in the array, 
//postedDisplay.attr("value") = 0, posterDisplay.attr("value")=posters.length-1
//then distribute posters again
// the backwards button is pushed and teh 5th of the display's valu is equal to poster.length-1, poster[i].value=0
//distribute again.




//   // GET route for getting all of the todos
//   app.get("/api/todos", function(req, res) {
//     // findAll returns all entries for a table when used with no options
//     db.Todo.findAll({}).then(function(dbTodo) {
//       // We have access to the todos as an argument inside of the callback function
//       res.json(dbTodo);
//     });
//   });

//   // POST route for saving a new todo
//   app.post("/api/todos", function(req, res) {
//     // create takes an argument of an object describing the item we want to
//     // insert into our table. In this case we just we pass in an object with a text
//     // and complete property
//     db.Todo.create({
//       text: req.body.text,
//       complete: req.body.complete
//     }).then(function(dbTodo) {
//       // We have access to the new todo as an argument inside of the callback function
//       res.json(dbTodo);
//     });
//   });

//   // DELETE route for deleting todos. We can get the id of the todo to be deleted from
//   // req.params.id
//   app.delete("/api/todos/:id", function(req, res) {
//     // We just have to specify which todo we want to destroy with "where"
//     db.Todo.destroy({
//       where: {
//         id: req.params.id
//       }
//     }).then(function(dbTodo) {
//       res.json(dbTodo);
//     });

//   });

//   // PUT route for updating todos. We can get the updated todo data from req.body
//   app.put("/api/todos", function(req, res) {
//     // Update takes in an object describing the properties we want to update, and
//     // we use where to describe which objects we want to update
//     db.Todo.update({
//       text: req.body.text,
//       complete: req.body.complete
//     }, {
//       where: {
//         id: req.body.id
//       }
//     }).then(function(dbTodo) {
//       res.json(dbTodo);
//     });
//   });

// };
// https://api.themoviedb.org/3/discover/movie?primary_release_date.gte=2020-02-22&primary_release_date.lte=2020-02-22&api_key=052554d7a6faad5978b2ef60814ccc5d
// queryURL = "https://api.openweathermap.org/data/2.5/weather?q="+cityInput+","+countryInput+"&appid=" + APIKey;}

// $.ajax({
//           url: queryURL,
//           method: "GET"
//         }).then(function(response) 